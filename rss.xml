<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>尚弟的小笔记</title>
        <atom:link href="http://blog.shrp.me//rss.xml" rel="self" type="application/rss+xml"/>
        <link>http://blog.shrp.me/</link>
        <dc:language>zh-cn</dc:language>
        <sy:updatePeriod>hourly</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>
    <item><title>在Mac终端格式化Json并自动复制到粘贴板</title><link>http://blog.shrp.me//format-and-copy-json-on-mac.html</link><pubdate>2017-04-01</pubdate><content:encoded>&lt;p&gt;　　现在的Restful接口非常多，我们开发会经常遇到调试json的地方。但是json一般都是compact过的，肉眼很难观察，但是打开页面、工具去解析又很麻烦。有什么好办法呢？这个在Mac上有个非常轻松的解决办法，那就是使用命令行工具&lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;。    &lt;/p&gt;

&lt;p&gt;　　首先需要安装工具jq，Mac可以直接使用brew安装。&lt;/p&gt;

&lt;p&gt;　　然后在你的终端里使用命令&lt;code&gt;pbpaste | jq "." | pbcopy; pbpaste | jq; echo -e "\033[0;32mjson copied to clipboard!"&lt;/code&gt;就可以一行命令把粘贴板里的json文本格式化，并重新复制到粘贴板。&lt;/p&gt;

&lt;p&gt;　　当然这么做非常繁琐，所以你需要把它alias为bash命令。对于fish，我单独制作了一个function，你可以将我的脚本放到function目录内使用，地址&lt;a href="https://raw.githubusercontent.com/stirp/oh-my-fish/master/functions/jsonfmt.fish"&gt;https://raw.githubusercontent.com/stirp/oh-my-fish/master/functions/jsonfmt.fish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文参考知乎文章&lt;a href="https://zhuanlan.zhihu.com/p/26134439"&gt;【Mac小技巧】一键format json&lt;/a&gt;&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//format-and-copy-json-on-mac.html</guid></item><item><title>Intellij 和 docker for Mac的兼容方案</title><link>http://blog.shrp.me//compatible-workaroud-about-Intellij-and-Dorkcer-for-Mac.html</link><pubdate>2017-02-22</pubdate><content:encoded>&lt;p&gt;　　今天在配置Intellij使用Docker for mac的时候发现需要使用api-url，但是Docker for mac并没有api-url。经过搜索发现&lt;a href="http://www.cnblogs.com/micrari/p/6169936.html"&gt;这里(http://www.cnblogs.com/micrari/p/6169936.html)&lt;/a&gt;有解决方案，简单来讲是使用socat将unix的socket文件转发到本地的tcp端口。鉴于互联网链接可能失效，附文如后：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;笔者在自己的Mac上安装的是Docker for Mac，而不是Docker Toolbox。&lt;/p&gt;
  
  &lt;p&gt;这两者最主要的区别在于Docker for Mac用HyperKit作为虚拟化解决方案而不是VirtualBox,相比Docker Toolbox，Docker for Mac更加native些。
  Docker for Mac 通过&lt;code&gt;/var/tmp/docker.sock&lt;/code&gt;暴露API。&lt;/p&gt;
  
  &lt;p&gt;JetBrains系IDE有一款叫&lt;a href="https://youtrack.jetbrains.com/issue/IDEA-153973#comment=27-1484220"&gt;Docker Integration&lt;/a&gt;的插件。&lt;/p&gt;
  
  &lt;p&gt;当笔者尝试配置此插件时，发现它对Docker for Mac用户不是太友好。而在笔者的另一台安装Docker Toolbox的Mac上却是相当容易的。&lt;/p&gt;
  
  &lt;p&gt;&lt;img src="http://images2015.cnblogs.com/blog/584724/201612/584724-20161213143354058-100182548.png"&gt;&lt;/p&gt;
  
  &lt;p&gt;当打开配置页，默认的显示结果如图所示，API URL为https://192.168.99.100:2376。然而这并不起作用，没办法和Docker建立连接。&lt;/p&gt;
  
  &lt;p&gt;当我尝试在API URL中随便填入&lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt;，IDE提示如下。
  &lt;img src="http://images2015.cnblogs.com/blog/584724/201612/584724-20161213144232917-1999769934.png"&gt;
  点开More info，会进到这个&lt;a href="https://youtrack.jetbrains.com/issue/IDEA-153973#comment=27-1484220"&gt;issue&lt;/a&gt;
  &lt;img src="http://images2015.cnblogs.com/blog/584724/201612/584724-20161213143354058-100182548.png"&gt;
  发现Docker Integration与Docker for Mac的兼容性问题有一个workaround&lt;/p&gt;
  
  &lt;p&gt;在命令行输入&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;brew install socat&lt;/code&gt;&lt;/p&gt;
  
  &lt;p&gt;安装socat&lt;/p&gt;
  
  &lt;p&gt;再输入命令&lt;/p&gt;
  
  &lt;p&gt;&lt;code&gt;socat -d -d TCP-L:8099,fork UNIX:/var/run/docker.sock&lt;/code&gt;&lt;/p&gt;
  
  &lt;p&gt;再在IntelliJ中配置API URL为&lt;code&gt;tcp://localhost:8099&lt;/code&gt;
  可以看到最终成功连接到docker，如下图所示。
  &lt;img src="http://images2015.cnblogs.com/blog/584724/201612/584724-20161213150704479-236755813.png"&gt;
  &lt;img src="http://images2015.cnblogs.com/blog/584724/201612/584724-20161213150447120-1352983762.png"&gt;
  笔者阅读了相关ISSUE，事实上，这个问题并没有真正的解决，只是目前有这么个workaround。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded><guid>http://blog.shrp.me//compatible-workaroud-about-Intellij-and-Dorkcer-for-Mac.html</guid></item><item><title>在CentOS7安装PPTP client和Gnome的PPTP界面</title><link>http://blog.shrp.me//Install-pptp-and-gnome-pptp-client-on-centos7.html</link><pubdate>2017-02-06</pubdate><content:encoded>&lt;p&gt;不知道为什么，CentOS7默认的yum源里没有PPTP的GNOME客户端，设置很不方便。&lt;/p&gt;

&lt;p&gt;那么简单的方式就是直接安装其他源的rpm,比如&lt;a href="http://li.nux.ro/download/nux/dextop/el7/x86_64/"&gt;http://li.nux.ro/download/nux/dextop/el7/x86_64/&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;也可以直接运行命令搞定：&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;sudo yum install http&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;li&lt;span class="token punctuation"&gt;.&lt;/span&gt;nux&lt;span class="token punctuation"&gt;.&lt;/span&gt;ro&lt;span class="token operator"&gt;/&lt;/span&gt;download&lt;span class="token operator"&gt;/&lt;/span&gt;nux&lt;span class="token operator"&gt;/&lt;/span&gt;dextop&lt;span class="token operator"&gt;/&lt;/span&gt;el7&lt;span class="token operator"&gt;/&lt;/span&gt;x86_64&lt;span class="token operator"&gt;/&lt;/span&gt;NetworkManager&lt;span class="token operator"&gt;-&lt;/span&gt;pptp&lt;span class="token number"&gt;-0.9&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token number"&gt;8.2&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;4&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;el7&lt;span class="token punctuation"&gt;.&lt;/span&gt;nux&lt;span class="token punctuation"&gt;.&lt;/span&gt;x86_64&lt;span class="token punctuation"&gt;.&lt;/span&gt;rpm
sudo yum install http&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;li&lt;span class="token punctuation"&gt;.&lt;/span&gt;nux&lt;span class="token punctuation"&gt;.&lt;/span&gt;ro&lt;span class="token operator"&gt;/&lt;/span&gt;download&lt;span class="token operator"&gt;/&lt;/span&gt;nux&lt;span class="token operator"&gt;/&lt;/span&gt;dextop&lt;span class="token operator"&gt;/&lt;/span&gt;el7&lt;span class="token operator"&gt;/&lt;/span&gt;x86_64&lt;span class="token operator"&gt;/&lt;/span&gt;NetworkManager&lt;span class="token operator"&gt;-&lt;/span&gt;pptp&lt;span class="token operator"&gt;-&lt;/span&gt;gnome&lt;span class="token number"&gt;-0.9&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token number"&gt;8.2&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;4&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;el7&lt;span class="token punctuation"&gt;.&lt;/span&gt;nux&lt;span class="token punctuation"&gt;.&lt;/span&gt;x86_64&lt;span class="token punctuation"&gt;.&lt;/span&gt;rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后在系统的网络设置中就能够添加自己的配置啦！&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Install-pptp-and-gnome-pptp-client-on-centos7.html</guid></item><item><title>OpenWRT安装OpenVPN</title><link>http://blog.shrp.me//Install-OpenVPN-on-OpenWRT.html</link><pubdate>2017-01-30</pubdate><content:encoded>&lt;p&gt;　　苹果升级iOS10和Mac OS X Sierra有一段时间了，我的iPhone一不小心就中招升级了，导致我在外边玩游戏速度特别差，也不能拨号回家。&lt;/p&gt;

&lt;p&gt;　　之前尝试着装个L2tp服务器，发现问题多多，始终不能成功；正好这次放假看到了知乎这个&lt;a href="https://www.zhihu.com/question/21751217/answer/32851461"&gt;答案&lt;/a&gt;，所以就尝试着按照这个方式装一个OpenVPN服务器。&lt;/p&gt;

&lt;p&gt;　　1、安装相应的软件：&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;opkg update
opkg install openvpn&lt;span class="token operator"&gt;-&lt;/span&gt;polarssl
opkg install openvpn&lt;span class="token operator"&gt;-&lt;/span&gt;easy&lt;span class="token operator"&gt;-&lt;/span&gt;rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　原文说的KEY_CN就是被注解掉的，所以不用执行相应的sed。&lt;/p&gt;

&lt;p&gt;　　2、修改/etc/easy-rsa/vars，把原文所说的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KEY_SIZE=2048
export KEY_COUNTRY=CN
export KEY_PROVINCE=Canton
export KEY_CITY=city_name
export KEY_ORG=org_name
export KEY_EMAIL=email_address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;都修改一下，然后执行&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;source &lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;easy&lt;span class="token operator"&gt;-&lt;/span&gt;rsa&lt;span class="token operator"&gt;/&lt;/span&gt;vars
clean&lt;span class="token operator"&gt;-&lt;/span&gt;all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来做好生成证书的准备。&lt;/p&gt;

&lt;p&gt;　　3、执行命令生成证书&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;pkitool –initca
pkitool &lt;span class="token operator"&gt;--&lt;/span&gt;server 服务端名称
pkitool 客户端名称&lt;span class="token number"&gt;0&lt;/span&gt;
pkitool 客户端名称&lt;span class="token number"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理论上有一个客户端就需要生成一套客户端的证书，当然，你也可以按照我的一会列出的参数，一套证书多个客户端使用。&lt;/p&gt;

&lt;p&gt;　　4、执行&lt;code&gt;build-dh&lt;/code&gt;来生成Diffie Hellman参数&lt;/p&gt;

&lt;p&gt;　　5、生成ta.key&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;openvpn &lt;span class="token operator"&gt;--&lt;/span&gt;genkey &lt;span class="token operator"&gt;--&lt;/span&gt;secret &lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;easy&lt;span class="token operator"&gt;-&lt;/span&gt;rsa&lt;span class="token operator"&gt;/&lt;/span&gt;keys&lt;span class="token operator"&gt;/&lt;/span&gt;ta&lt;span class="token punctuation"&gt;.&lt;/span&gt;key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　6、编辑/etc/config/network，修改lan下的option ifname ，增加tun0&lt;/p&gt;

&lt;p&gt;　　7、修改/etc/config/openvpn&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;config openvpn my&lt;span class="token operator"&gt;-&lt;/span&gt;server
    option enabled &lt;span class="token number"&gt;1&lt;/span&gt;
    option local &lt;span class="token number"&gt;0.0&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token number"&gt;0.0&lt;/span&gt;
    option port &lt;span class="token number"&gt;1194&lt;/span&gt;
    option proto tcp
    option dev tun
    option ca &lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;easy&lt;span class="token operator"&gt;-&lt;/span&gt;rsa&lt;span class="token operator"&gt;/&lt;/span&gt;keys&lt;span class="token operator"&gt;/&lt;/span&gt;ca&lt;span class="token punctuation"&gt;.&lt;/span&gt;crt
    option cert &lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;easy&lt;span class="token operator"&gt;-&lt;/span&gt;rsa&lt;span class="token operator"&gt;/&lt;/span&gt;keys&lt;span class="token operator"&gt;/&lt;/span&gt;my&lt;span class="token operator"&gt;-&lt;/span&gt;server&lt;span class="token punctuation"&gt;.&lt;/span&gt;crt
    option key &lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;easy&lt;span class="token operator"&gt;-&lt;/span&gt;rsa&lt;span class="token operator"&gt;/&lt;/span&gt;keys&lt;span class="token operator"&gt;/&lt;/span&gt;my&lt;span class="token operator"&gt;-&lt;/span&gt;server&lt;span class="token punctuation"&gt;.&lt;/span&gt;key
    option dh &lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;easy&lt;span class="token operator"&gt;-&lt;/span&gt;rsa&lt;span class="token operator"&gt;/&lt;/span&gt;keys&lt;span class="token operator"&gt;/&lt;/span&gt;dh2048&lt;span class="token punctuation"&gt;.&lt;/span&gt;pem
    option server &lt;span class="token string"&gt;"172.8.0.0 255.255.255.0"&lt;/span&gt;
    list push &lt;span class="token string"&gt;"redirect-gateway def1"&lt;/span&gt;
    list push &lt;span class="token string"&gt;"dhcp-option DNS 172.8.0.1"&lt;/span&gt;
    list push &lt;span class="token string"&gt;"dhcp-option WINS 172.8.0.1"&lt;/span&gt;
    option client_to_client &lt;span class="token number"&gt;1&lt;/span&gt;
    option duplicate_cn &lt;span class="token number"&gt;1&lt;/span&gt; &lt;span class="token comment" spellcheck="true"&gt;#允许一个证书多个客户端使用
&lt;/span&gt;    option keepalive &lt;span class="token string"&gt;"10 120"&lt;/span&gt;
    option tls_auth &lt;span class="token string"&gt;"/etc/easy-rsa/keys/ta.key 0"&lt;/span&gt;
    option tls_server &lt;span class="token number"&gt;1&lt;/span&gt;
    option comp_lzo yes
    option max_clients &lt;span class="token number"&gt;100&lt;/span&gt;
    option persist_key &lt;span class="token number"&gt;1&lt;/span&gt;
    option persist_tun &lt;span class="token number"&gt;1&lt;/span&gt;
    option status &lt;span class="token operator"&gt;/&lt;/span&gt;tmp&lt;span class="token operator"&gt;/&lt;/span&gt;openvpn&lt;span class="token operator"&gt;-&lt;/span&gt;status&lt;span class="token punctuation"&gt;.&lt;/span&gt;log
    option log         &lt;span class="token operator"&gt;/&lt;/span&gt;tmp&lt;span class="token operator"&gt;/&lt;/span&gt;openvpn&lt;span class="token punctuation"&gt;.&lt;/span&gt;log
    option verb &lt;span class="token number"&gt;3&lt;/span&gt;
    option mute &lt;span class="token number"&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　8、添加路由做测试 &lt;code&gt;iptables -t nat -A POSTROUTING -s 172.8.0.0/24 -j MASQUERADE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;　　9、添加路由，保证以后重启能正常使用&lt;code&gt;iptables -A FORWARD -s 172.8.0.0/24 -j ACCEPT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;　　10、编辑&lt;code&gt;/etc/config/firewall&lt;/code&gt;，在wan开放1194端口&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;config rule
option enabled &lt;span class="token string"&gt;'1'&lt;/span&gt;
option target &lt;span class="token string"&gt;'ACCEPT'&lt;/span&gt;
option src &lt;span class="token string"&gt;'wan'&lt;/span&gt;
option name &lt;span class="token string"&gt;'Allow-WAN-OpenVPN-Input'&lt;/span&gt;
option family &lt;span class="token string"&gt;'ipv4'&lt;/span&gt;
option proto &lt;span class="token string"&gt;'tcp'&lt;/span&gt;
option dest_port &lt;span class="token string"&gt;'1194'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　11、重启服务生效 &lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;init&lt;span class="token punctuation"&gt;.&lt;/span&gt;d&lt;span class="token operator"&gt;/&lt;/span&gt;openvpn enable
reboot（or &lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;init&lt;span class="token punctuation"&gt;.&lt;/span&gt;d&lt;span class="token operator"&gt;/&lt;/span&gt;network restart&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;init&lt;span class="token punctuation"&gt;.&lt;/span&gt;d&lt;span class="token operator"&gt;/&lt;/span&gt;firewall restart&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;etc&lt;span class="token operator"&gt;/&lt;/span&gt;init&lt;span class="token punctuation"&gt;.&lt;/span&gt;d&lt;span class="token operator"&gt;/&lt;/span&gt;openvpn start&lt;span class="token punctuation"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端只要把相应的ca.crt,ta.key,客户端.crt，客户端.key下载下来，编辑文本文件vpn.ovpn，内容如下：&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;client
proto tcp
remote 服务器ip &lt;span class="token number"&gt;1194&lt;/span&gt;
dev tun
comp&lt;span class="token operator"&gt;-&lt;/span&gt;lzo
nobind
ca ca&lt;span class="token punctuation"&gt;.&lt;/span&gt;crt
cert 客户端&lt;span class="token punctuation"&gt;.&lt;/span&gt;crt
key 客户端&lt;span class="token punctuation"&gt;.&lt;/span&gt;key
tls&lt;span class="token operator"&gt;-&lt;/span&gt;auth ta&lt;span class="token punctuation"&gt;.&lt;/span&gt;key &lt;span class="token number"&gt;1&lt;/span&gt;
route&lt;span class="token operator"&gt;-&lt;/span&gt;delay &lt;span class="token number"&gt;2&lt;/span&gt;
route&lt;span class="token operator"&gt;-&lt;/span&gt;method exe
verb &lt;span class="token number"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要拨号后使用代理，只需要添加如下参数：&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;dhcp&lt;span class="token operator"&gt;-&lt;/span&gt;option PROXY_HTTP 代理ip 代理端口
dhcp&lt;span class="token operator"&gt;-&lt;/span&gt;option PROXY_HTTPS 代理ip 代理端口
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要使用自动代理，添加如下参数：&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;dhcp&lt;span class="token operator"&gt;-&lt;/span&gt;option PROXY_AUTO_CONFIG_URL http&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;example&lt;span class="token punctuation"&gt;.&lt;/span&gt;tld&lt;span class="token operator"&gt;/&lt;/span&gt;proxy&lt;span class="token punctuation"&gt;.&lt;/span&gt;pac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过上述几个参数并非所有openVPN客户端支持。&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Install-OpenVPN-on-OpenWRT.html</guid></item><item><title>OpenWRT折腾KCPTUN</title><link>http://blog.shrp.me//KCPTUN-over-OpenWRT.html</link><pubdate>2017-01-29</pubdate><content:encoded>&lt;p&gt;　　年前刚好看到有个&lt;a href="https://github.com/xtaci/kcptun"&gt;KCPTUN&lt;/a&gt;项目，用于高ping网络的加速，趁过年也给家里的路由器加个速。&lt;/p&gt;

&lt;p&gt;　　先到要加速的服务器上安装server端。先下载服务端程序并且解压缩&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;wget https&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;github&lt;span class="token punctuation"&gt;.&lt;/span&gt;com&lt;span class="token operator"&gt;/&lt;/span&gt;xtaci&lt;span class="token operator"&gt;/&lt;/span&gt;kcptun&lt;span class="token operator"&gt;/&lt;/span&gt;releases&lt;span class="token operator"&gt;/&lt;/span&gt;download&lt;span class="token operator"&gt;/&lt;/span&gt;v20170120&lt;span class="token operator"&gt;/&lt;/span&gt;kcptun&lt;span class="token operator"&gt;-&lt;/span&gt;linux&lt;span class="token number"&gt;-386&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;20170120&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;tar&lt;span class="token punctuation"&gt;.&lt;/span&gt;gz

tar &lt;span class="token operator"&gt;-&lt;/span&gt;zxcf kcptun&lt;span class="token operator"&gt;-&lt;/span&gt;linux&lt;span class="token number"&gt;-386&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;20170120&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;tar&lt;span class="token punctuation"&gt;.&lt;/span&gt;gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到了两个程序&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;rwxr&lt;span class="token operator"&gt;-&lt;/span&gt;xr&lt;span class="token operator"&gt;-&lt;/span&gt;x &lt;span class="token number"&gt;1&lt;/span&gt;  &lt;span class="token number"&gt;2908832&lt;/span&gt;  &lt;span class="token number"&gt;1&lt;/span&gt;月 &lt;span class="token number"&gt;20&lt;/span&gt; &lt;span class="token number"&gt;03&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token number"&gt;45&lt;/span&gt; client_linux_386
&lt;span class="token operator"&gt;-&lt;/span&gt;rwxr&lt;span class="token operator"&gt;-&lt;/span&gt;xr&lt;span class="token operator"&gt;-&lt;/span&gt;x &lt;span class="token number"&gt;1&lt;/span&gt;  &lt;span class="token number"&gt;2896448&lt;/span&gt;  &lt;span class="token number"&gt;1&lt;/span&gt;月 &lt;span class="token number"&gt;20&lt;/span&gt; &lt;span class="token number"&gt;03&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token number"&gt;45&lt;/span&gt; server_linux_386
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用如下命令开始服务端的转发&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;root&lt;span class="token operator"&gt;/&lt;/span&gt;kcptun&lt;span class="token operator"&gt;/&lt;/span&gt;server_linux_386 &lt;span class="token operator"&gt;-&lt;/span&gt;t &lt;span class="token string"&gt;"shadowsocks服务器ip:端口"&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;l &lt;span class="token string"&gt;":加速端口"&lt;/span&gt; &lt;span class="token operator"&gt;--&lt;/span&gt;mode fast2 &lt;span class="token operator"&gt;--&lt;/span&gt;key &lt;span class="token string"&gt;"密码"&lt;/span&gt; &lt;span class="token operator"&gt;--&lt;/span&gt;nocomp &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　然后在OpenWRT路由器上安装客户端，原项目没有ar71xx的程序，可以到&lt;a href="https://github.com/bettermanbao/openwrt-kcptun/releases"&gt;https://github.com/bettermanbao/openwrt-kcptun/releases&lt;/a&gt;下载，解压后也是两个程序，我们只需要如下这个程序就足够了&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;rwxrwxr&lt;span class="token operator"&gt;-&lt;/span&gt;x    &lt;span class="token number"&gt;1&lt;/span&gt; &lt;span class="token number"&gt;1000&lt;/span&gt;     &lt;span class="token number"&gt;1000&lt;/span&gt;       &lt;span class="token number"&gt;1241980&lt;/span&gt; Jan &lt;span class="token number"&gt;20&lt;/span&gt; &lt;span class="token number"&gt;10&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token number"&gt;03&lt;/span&gt; client_linux_mips
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用如下命令启动客户端&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;client_linux_mips &lt;span class="token operator"&gt;-&lt;/span&gt;r &lt;span class="token string"&gt;"服务端ip:端口"&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;l &lt;span class="token string"&gt;":444"&lt;/span&gt; &lt;span class="token operator"&gt;--&lt;/span&gt;mode fast2 &lt;span class="token operator"&gt;--&lt;/span&gt;key &lt;span class="token string"&gt;"密码"&lt;/span&gt; &lt;span class="token operator"&gt;--&lt;/span&gt;nocomp &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不加--nocomp，会在client端遇到
main.go:64: stream opened
&lt;code&gt;panic: runtime error: slice bounds out of range错误&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用了以后网络速度杠杠的~&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//KCPTUN-over-OpenWRT.html</guid></item><item><title>JetBrains,为信仰充值</title><link>http://blog.shrp.me//JetBrains-Charge-For-Faith.html</link><pubdate>2016-10-08</pubdate><content:encoded>&lt;p&gt;　　上个月底我的 IntelliJ 教育版到期了，虽然我可以简单的收个邮件继续用免费的教育版，但是其实本质上它也是盗版，因为我在使用他进行商业开发，挣养家糊口的费用呢，是违反 Licence 的。&lt;/p&gt;

&lt;p&gt;　　于是今天索性买了全家桶一年期，明年今日，还得继续买。我想想我现在应该没什么东西还是盗版了吧。&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//JetBrains-Charge-For-Faith.html</guid></item><item><title>五月天演唱会归来</title><link>http://blog.shrp.me//Return-From-May-Day-Concert.html</link><pubdate>2016-08-27</pubdate><content:encoded>&lt;p&gt;　　昨晚从五月天鸟巢的演唱会归来，心情久久不能平静。之前上iTunes查看，最新的专辑都没有上架；昨晚再看，已然有了，赶紧买下来听，质量真的还是很不错的。&lt;/p&gt;

&lt;p&gt;　　不过说起演唱会，觉得有的地方不错，有的地方却低于预期。五月天的互动做的不错，不过跟以前耳闻的那种级别，好像是稍微差了点，唱歌之间说的其实跟听众关系不大（或许跟五迷来说关系比较大）；而且还说从台上能看到每一位观众的脸……感觉怪怪的。大哥这里是鸟巢啊怎么看啊！最后退场居然什么也没说，朝三个方向三鞠躬就结束了。我本来以为会说点什么，欢迎大家下次继续来神马的……&lt;/p&gt;

&lt;p&gt;　　最让人接受不能的是牛奶广告强行植入……唱了两首歌，阿信坐在台上喝了杯牛奶，还被说白色的粘稠的液体……大雾。&lt;/p&gt;

&lt;p&gt;　　不过，歌曲安排的很好，每节都有快歌慢歌，老歌新歌，让听众都能参与进来；每首歌都或多或少做了修改，听众不是来听CD的；演唱会是18:30-21:30,大家回家都能坐地铁很方便。&lt;/p&gt;

&lt;p&gt;　　随文带几张拍的图片：）&lt;/p&gt;

&lt;p&gt;&lt;img src="http://stirp.github.io/img/thumb_IMG_1091_1024.jpg" alt="" title=""&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://stirp.github.io/img/thumb_IMG_1093_1024.jpg" alt="" title=""&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://stirp.github.io/img/thumb_WechatIMG9_1024.jpg" alt="" title=""&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://stirp.github.io/img/thumb_WechatIMG12_1024.jpg" alt="" title=""&gt;&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Return-From-May-Day-Concert.html</guid></item><item><title>Charles 出4啦</title><link>http://blog.shrp.me//Charles-Update-to-4.html</link><pubdate>2016-08-02</pubdate><content:encoded>&lt;p&gt;　　很多人用Windows抓Http包的时候都用fiddler，在Mac上用Charles则是最好的选择。&lt;/p&gt;

&lt;p&gt;　　刚好Charles这两天出第四版了，试了下比原先的UI更线代了，功能也更强大了，而且好像价格也更优惠了。&lt;/p&gt;

&lt;p&gt;　　于是赶紧买买买，正版计划又前进了一小步，哈哈~&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Charles-Update-to-4.html</guid></item><item><title>远程调试服务器的tcp流</title><link>http://blog.shrp.me//Remote-Debug-TCP-Stream-On-Server.html</link><pubdate>2016-07-27</pubdate><content:encoded>&lt;p&gt;　　如果只是一个http业务，一般是不需要调试其TCP流的；但是现在我正在处理一个基于TCP长连接的协议，有时候有任何问题，通过TCP流都可以帮助我调试服务。&lt;/p&gt;

&lt;p&gt;　　但是这只是本地开发时常见的情况，如果要调试测试服务器乃至生产服务器接受的数据流是否正常呢？当然可以在服务器运行tcpdump，比如&lt;code&gt;tcpdump -i eth0 tcp port 抓包端口号 -w /tmp/debug.cap&lt;/code&gt;，然后将debug.cap从服务器scp到本地来，用wireshark详细研究。&lt;/p&gt;

&lt;p&gt;　　但是有时候调试，服务正常与否跟相应时间什么的也有关系，这种事后研究的方式就不方便了，可以直接ssh服务器，通过tcpdump输出到管道，然后管道这边通过wireshark去抓包分析，省去了scp的麻烦，也能实时调试了。&lt;/p&gt;

&lt;p&gt;　　可以使用命令&lt;code&gt;ssh fedSDE "sudo tcpdump -s 0 -U -n -i eth0 port 抓包端口号 -w -" | wireshark -k -i -&lt;/code&gt;来轻松做到这点。&lt;/p&gt;

&lt;p&gt;　　不过有时候会有异常，“sudo：抱歉，您必须拥有一个终端来执行 sudo”，则需要使用管理员修改/etc/sudoers，把&lt;code&gt;Defaults    requiretty&lt;/code&gt;这一行注释掉就可以了。&lt;/p&gt;

&lt;p&gt;从此妈妈再也不用担心我调试服务器上的流量啦！&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Remote-Debug-TCP-Stream-On-Server.html</guid></item><item><title>Mac如何提高文件描述符个数</title><link>http://blog.shrp.me//Increase-Number-of-file-descriptor.html</link><pubdate>2016-07-09</pubdate><content:encoded>&lt;p&gt;　　作为一个常年使用Mac进行开发的程序猿，或多或少会接触到一些高并发的任务，动辄就需要电脑来它几千个线程，几万几十万个QPS。&lt;/p&gt;

&lt;p&gt;　　但是Mac的普通版本并没有为这种行为进行优化，最简单的，你在终端输入ulimit -a，你会看到当前系统能够打开的文件描述符默认只有……256。这根本不够好嘛？！&lt;/p&gt;

&lt;p&gt;　　但是作为一个Linux使用经验丰富的人，你一定以为它可以通过/etc下的配置修改。可惜Mac不是Linux而是FreeBSD体系，而且它这个配置自成一派，如果不谷歌一番，我还真不知道怎么改呢。&lt;/p&gt;

&lt;p&gt;　　在最新版的EI Capitan系统，要修改这个值，首先需要关闭csrutil。Mac对csrutil的安全措施很到位，你使用sudo是不能关闭的，首先需要进入recovery mode，也就是重启时按下command+r，进入恢复模式，然后打开终端，输入csrutil disable，然后重启，建立如下两个文件：&lt;/p&gt;

&lt;p&gt;/Library/LaunchDaemons/limit.maxfiles.plist&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;  
&amp;lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"  
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;
&amp;lt;plist version="1.0"&amp;gt;  
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;limit.maxfiles&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
      &amp;lt;string&amp;gt;launchctl&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;limit&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;maxfiles&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;524288&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;524288&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;ServiceIPC&amp;lt;/key&amp;gt;
    &amp;lt;false/&amp;gt;
  &amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/Library/LaunchDaemons/limit.maxproc.plist&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;  
&amp;lt;!DOCTYPE plist PUBLIC "-//Apple/DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;  
  &amp;lt;plist version="1.0"&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;limit.maxproc&amp;lt;/string&amp;gt;
      &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
          &amp;lt;string&amp;gt;launchctl&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;limit&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;maxproc&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;2048&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;2048&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
      &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
        &amp;lt;true /&amp;gt;
      &amp;lt;key&amp;gt;ServiceIPC&amp;lt;/key&amp;gt;
        &amp;lt;false /&amp;gt;
    &amp;lt;/dict&amp;gt;
  &amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再重启一次，执行ulimit -a，你就会发现数字都变化了，现在可以安心测试了！&lt;/p&gt;

&lt;p&gt;PS：其实你可以先建立文件再进入恢复模式的，这样一次重启就足够了&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Increase-Number-of-file-descriptor.html</guid></item></channel>
</rss>