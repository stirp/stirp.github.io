<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>尚弟的小笔记</title>
        <atom:link href="http://stirp.github.io//rss.xml" rel="self" type="application/rss+xml"/>
        <link>http://stirp.github.io//rss.xml</link>
        <dc:language>zh-cn</dc:language>
        <sy:updatePeriod>hourly</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>
    <item xmlns="http://www.w3.org/1999/xhtml"><title>temp</title><link>http://stirp.github.io//temp.html</link><pubdate>2016-02-19</pubdate><content:encoded>&lt;pre class=" language-java"&gt;&lt;code class=" language-java"&gt;
&lt;span class="token keyword"&gt;package&lt;/span&gt; com&lt;span class="token punctuation"&gt;.&lt;/span&gt;woqu&lt;span class="token punctuation"&gt;.&lt;/span&gt;crm&lt;span class="token punctuation"&gt;.&lt;/span&gt;server&lt;span class="token punctuation"&gt;;&lt;/span&gt;

&lt;span class="token keyword"&gt;import&lt;/span&gt; java&lt;span class="token punctuation"&gt;.&lt;/span&gt;io&lt;span class="token punctuation"&gt;.&lt;/span&gt;UnsupportedEncodingException&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;import&lt;/span&gt; java&lt;span class="token punctuation"&gt;.&lt;/span&gt;util&lt;span class="token punctuation"&gt;.&lt;/span&gt;LinkedList&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;import&lt;/span&gt; java&lt;span class="token punctuation"&gt;.&lt;/span&gt;util&lt;span class="token punctuation"&gt;.&lt;/span&gt;List&lt;span class="token punctuation"&gt;;&lt;/span&gt;

&lt;span class="token comment" spellcheck="true"&gt;/**
 * Created by shangrenpeng on 16/2/18.
 */&lt;/span&gt;
&lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;class&lt;/span&gt; &lt;span class="token class-name"&gt;PHPUrlDecoder&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
    &lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token function"&gt;decode&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;String s&lt;span class="token punctuation"&gt;,&lt;/span&gt; String enc&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token keyword"&gt;throws&lt;/span&gt; UnsupportedEncodingException &lt;span class="token punctuation"&gt;{&lt;/span&gt;

        &lt;span class="token keyword"&gt;int&lt;/span&gt; numChars &lt;span class="token operator"&gt;=&lt;/span&gt; s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;length&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        List&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;Byte&amp;gt; sb &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;LinkedList&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&amp;gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;int&lt;/span&gt; i &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

        &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;enc&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;length&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;==&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;throw&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;UnsupportedEncodingException&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;"URLDecoder: empty string enc parameter"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;

        &lt;span class="token keyword"&gt;char&lt;/span&gt; c&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; bytes &lt;span class="token operator"&gt;=&lt;/span&gt; null&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;while&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;i &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; numChars&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            c &lt;span class="token operator"&gt;=&lt;/span&gt; s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;charAt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token keyword"&gt;switch&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                &lt;span class="token keyword"&gt;case&lt;/span&gt; &lt;span class="token string"&gt;'+'&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;
                    &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt;String&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;valueOf&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;' '&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;"UTF-8"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    i&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                &lt;span class="token keyword"&gt;case&lt;/span&gt; &lt;span class="token string"&gt;'%'&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;
                &lt;span class="token comment" spellcheck="true"&gt;/*
                 * Starting with this instance of %, process all
                 * consecutive substrings of the form %xy. Each
                 * substring %xy will yield a byte. Convert all
                 * consecutive  bytes obtained this way to whatever
                 * character(s) they represent in the provided
                 * encoding.
                 */&lt;/span&gt;

                    &lt;span class="token keyword"&gt;try&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                        &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;&lt;span class="token function"&gt;canParse&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;s &lt;span class="token punctuation"&gt;,&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
                            &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt;String&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;valueOf&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;"UTF-8"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            i&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                        &lt;span class="token punctuation"&gt;}&lt;/span&gt;

                       &lt;span class="token comment" spellcheck="true"&gt; // (numChars-i)/3 is an upper bound for the number
&lt;/span&gt;                       &lt;span class="token comment" spellcheck="true"&gt; // of remaining bytes
&lt;/span&gt;                        &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;bytes &lt;span class="token operator"&gt;==&lt;/span&gt; null&lt;span class="token punctuation"&gt;)&lt;/span&gt;
                            bytes &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;numChars&lt;span class="token operator"&gt;-&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token number"&gt;/3&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                        &lt;span class="token keyword"&gt;int&lt;/span&gt; pos &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

                        &lt;span class="token keyword"&gt;while&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;i&lt;span class="token number"&gt;+2&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; numChars&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                                &lt;span class="token punctuation"&gt;(&lt;/span&gt;c&lt;span class="token operator"&gt;==&lt;/span&gt;&lt;span class="token string"&gt;'%'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;

                            &lt;span class="token keyword"&gt;int&lt;/span&gt; v &lt;span class="token operator"&gt;=&lt;/span&gt; Integer&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;parseInt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;substring&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token number"&gt;+1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;i&lt;span class="token number"&gt;+3&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token number"&gt;,16&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt;
//                            if (v &amp;lt; 0){
&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt;//                                throw new IllegalArgumentException("URLDecoder: Illegal hex characters in escape (%) pattern - negative value");
&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt;//                            }
&lt;/span&gt;
                            bytes&lt;span class="token punctuation"&gt;[&lt;/span&gt;pos&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; v&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            i&lt;span class="token operator"&gt;+&lt;/span&gt;&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 3&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;i &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; numChars&lt;span class="token punctuation"&gt;)&lt;/span&gt;
                                c &lt;span class="token operator"&gt;=&lt;/span&gt; s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;charAt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
                        &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;,&lt;/span&gt;pos&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;catch&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;NumberFormatException&lt;/span&gt; e&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                        &lt;span class="token keyword"&gt;throw&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;
                                &lt;span class="token string"&gt;"URLDecoder: Illegal hex characters in escape (%) pattern - "&lt;/span&gt;
                                        &lt;span class="token operator"&gt;+&lt;/span&gt; e&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getMessage&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
                    &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                &lt;span class="token keyword"&gt;default&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;
                    &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt;String&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;valueOf&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;"UTF-8"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    i&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token punctuation"&gt;}&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;

        &lt;span class="token keyword"&gt;final&lt;/span&gt; Byte&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; ret &lt;span class="token operator"&gt;=&lt;/span&gt; sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;toArray&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;Byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;size&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

        &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token function"&gt;toPrimitive&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;ret&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; EMPTY_BYTE_ARRAY &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;byte&lt;/span&gt;&lt;span class="token number"&gt;[0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

    &lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token function"&gt;toPrimitive&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;Byte&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; array&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;array &lt;span class="token operator"&gt;==&lt;/span&gt; null&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; null&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;array&lt;span class="token punctuation"&gt;.&lt;/span&gt;length &lt;span class="token operator"&gt;==&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; EMPTY_BYTE_ARRAY&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; result &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;array&lt;span class="token punctuation"&gt;.&lt;/span&gt;length&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

            &lt;span class="token keyword"&gt;for&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; i &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; i &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; array&lt;span class="token punctuation"&gt;.&lt;/span&gt;length&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token operator"&gt;++&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                result&lt;span class="token punctuation"&gt;[&lt;/span&gt;i&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; array&lt;span class="token punctuation"&gt;[&lt;/span&gt;i&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;byteValue&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token punctuation"&gt;}&lt;/span&gt;

            &lt;span class="token keyword"&gt;return&lt;/span&gt; result&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;private&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;void&lt;/span&gt; &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;final&lt;/span&gt; List&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;Byte&amp;gt; sb&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;,&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; pos&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; j &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; j &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; pos&lt;span class="token punctuation"&gt;;&lt;/span&gt; j&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
            sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;add&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;bytes&lt;span class="token punctuation"&gt;[&lt;/span&gt;j&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;private&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;void&lt;/span&gt; &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;final&lt;/span&gt; List&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;Byte&amp;gt; sb&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; j &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; j &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;.&lt;/span&gt;length&lt;span class="token punctuation"&gt;;&lt;/span&gt; j&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
            sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;add&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;bytes&lt;span class="token punctuation"&gt;[&lt;/span&gt;j&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;private&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;boolean&lt;/span&gt; &lt;span class="token function"&gt;canParse&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;final&lt;/span&gt; String s&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;int&lt;/span&gt; i&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;try&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;int&lt;/span&gt; v &lt;span class="token operator"&gt;=&lt;/span&gt; Integer&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;parseInt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;substring&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token number"&gt;+1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;i&lt;span class="token number"&gt;+3&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token number"&gt;,16&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token boolean"&gt;true&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;catch&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Exception&lt;/span&gt; e&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token boolean"&gt;false&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid>http://stirp.github.io//temp.html</guid></item><item xmlns="http://www.w3.org/1999/xhtml"><title>title</title><link>http://stirp.github.io//test.html</link><pubdate>2016-01-17</pubdate><content:encoded>&lt;pre class=" language-cpp"&gt;&lt;code class=" language-cpp"&gt;&lt;span class="token comment" spellcheck="true"&gt;
//#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="token property"&gt;#include &lt;span class="token property"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token property"&gt;#include &lt;span class="token property"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token property"&gt;#include &lt;span class="token property"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token property"&gt;#include &lt;span class="token property"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token property"&gt;#include &lt;span class="token property"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token property"&gt;#include &lt;span class="token property"&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="token keyword"&gt;using&lt;/span&gt; &lt;span class="token keyword"&gt;namespace&lt;/span&gt; std&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;typedef&lt;/span&gt; &lt;span class="token keyword"&gt;long&lt;/span&gt; &lt;span class="token keyword"&gt;long&lt;/span&gt; ll&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;typedef&lt;/span&gt; &lt;span class="token keyword"&gt;unsigned&lt;/span&gt; &lt;span class="token keyword"&gt;long&lt;/span&gt; &lt;span class="token keyword"&gt;long&lt;/span&gt; ull&lt;span class="token punctuation"&gt;;&lt;/span&gt;

&lt;span class="token keyword"&gt;int&lt;/span&gt; &lt;span class="token function"&gt;iRead&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
&lt;span class="token punctuation"&gt;{&lt;/span&gt;
    &lt;span class="token keyword"&gt;int&lt;/span&gt; ret &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;int&lt;/span&gt; ch&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;while&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;&lt;span class="token function"&gt;isdigit&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;ch &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;getchar&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ch &lt;span class="token operator"&gt;!=&lt;/span&gt; &lt;span class="token string"&gt;'-'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;bool&lt;/span&gt; bm &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;ch &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token string"&gt;'-'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;bm&lt;span class="token punctuation"&gt;)&lt;/span&gt; ch &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;getchar&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;while&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;ret &lt;span class="token operator"&gt;=&lt;/span&gt; ret &lt;span class="token operator"&gt;*&lt;/span&gt; &lt;span class="token number"&gt;10&lt;/span&gt; &lt;span class="token operator"&gt;+&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;ch &lt;span class="token operator"&gt;-&lt;/span&gt; &lt;span class="token string"&gt;'0'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token function"&gt;isdigit&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;ch &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;getchar&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;return&lt;/span&gt; bm &lt;span class="token operator"&gt;?&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;ret &lt;span class="token operator"&gt;:&lt;/span&gt; ret&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token keyword"&gt;const&lt;/span&gt; &lt;span class="token keyword"&gt;int&lt;/span&gt; N &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;300003&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;const&lt;/span&gt; &lt;span class="token keyword"&gt;int&lt;/span&gt; STP &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;100000&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;struct&lt;/span&gt; iT&lt;span class="token punctuation"&gt;;&lt;/span&gt;
iT &lt;span class="token operator"&gt;*&lt;/span&gt;q&lt;span class="token punctuation"&gt;[&lt;/span&gt;N&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;struct&lt;/span&gt; iT
&lt;span class="token punctuation"&gt;{&lt;/span&gt;
    iT &lt;span class="token operator"&gt;*&lt;/span&gt;fa&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;*&lt;/span&gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;2&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;int&lt;/span&gt; val&lt;span class="token punctuation"&gt;,&lt;/span&gt; s&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;bool&lt;/span&gt; rev&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token property"&gt;#define iDir(c) ((c)-&amp;gt;fa-&amp;gt;ch[1] == (c))&lt;/span&gt;
    &lt;span class="token keyword"&gt;void&lt;/span&gt; &lt;span class="token function"&gt;up&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
    &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        s &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt; &lt;span class="token operator"&gt;+&lt;/span&gt; 
            &lt;span class="token punctuation"&gt;(&lt;/span&gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;?&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;s &lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;+&lt;/span&gt; 
            &lt;span class="token punctuation"&gt;(&lt;/span&gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;?&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;s &lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token keyword"&gt;void&lt;/span&gt; &lt;span class="token function"&gt;down&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
    &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;rev&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token keyword"&gt;return&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        rev &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token function"&gt;swap&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;rev &lt;span class="token operator"&gt;^&lt;/span&gt;&lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;rev &lt;span class="token operator"&gt;^&lt;/span&gt;&lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token keyword"&gt;void&lt;/span&gt; &lt;span class="token function"&gt;rot&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt; // 把this转到fa的位置 
&lt;/span&gt;    &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        iT &lt;span class="token operator"&gt;*&lt;/span&gt;f &lt;span class="token operator"&gt;=&lt;/span&gt; fa&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;f&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;fa&lt;span class="token punctuation"&gt;)&lt;/span&gt; f&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;fa&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token function"&gt;iDir&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;f&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;int&lt;/span&gt; dr &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;iDir&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        fa &lt;span class="token operator"&gt;=&lt;/span&gt; f&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;fa&lt;span class="token punctuation"&gt;,&lt;/span&gt; f&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;fa &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;dr&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;dr&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;fa &lt;span class="token operator"&gt;=&lt;/span&gt; f&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        f&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;dr&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;dr&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;dr&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; f&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        f&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;up&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token function"&gt;up&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;     &lt;span class="token comment" spellcheck="true"&gt; // !!!! 此时f已经是this的孩子了 
&lt;/span&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    iT &lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token function"&gt;splay&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;iT &lt;span class="token operator"&gt;*&lt;/span&gt;tag &lt;span class="token operator"&gt;=&lt;/span&gt; NULL&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt; // 把this转到tag下，返回this 
&lt;/span&gt;    &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        iT &lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;p &lt;span class="token operator"&gt;=&lt;/span&gt; q&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;for&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;iT &lt;span class="token operator"&gt;*&lt;/span&gt;i &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; i &lt;span class="token operator"&gt;!=&lt;/span&gt; tag&lt;span class="token punctuation"&gt;;&lt;/span&gt; i &lt;span class="token operator"&gt;=&lt;/span&gt; i&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;fa&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token operator"&gt;*&lt;/span&gt;p&lt;span class="token operator"&gt;++&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; i&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;while&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;p &lt;span class="token operator"&gt;!=&lt;/span&gt; q&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token operator"&gt;--&lt;/span&gt;p&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;down&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;for&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; fa &lt;span class="token operator"&gt;!=&lt;/span&gt; tag&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token function"&gt;rot&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;fa&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;fa &lt;span class="token operator"&gt;!=&lt;/span&gt; tag&lt;span class="token punctuation"&gt;)&lt;/span&gt;  &lt;span class="token comment" spellcheck="true"&gt; // 双旋的情况 
&lt;/span&gt;                &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token function"&gt;iDir&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token function"&gt;iDir&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;fa&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;?&lt;/span&gt; fa &lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;rot&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    iT &lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token function"&gt;select&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; k&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt; // 取rank k 从0开始 
&lt;/span&gt;    &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token function"&gt;down&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;int&lt;/span&gt; sl &lt;span class="token operator"&gt;=&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;?&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;s &lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;sl &lt;span class="token operator"&gt;==&lt;/span&gt; k&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;k &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; sl&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;select&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;k&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;else&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;select&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;k &lt;span class="token operator"&gt;-&lt;/span&gt; sl &lt;span class="token operator"&gt;-&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    iT &lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token function"&gt;min&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
    &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        iT &lt;span class="token operator"&gt;*&lt;/span&gt;c &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;this&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;while&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;c&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;down&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; c&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            c &lt;span class="token operator"&gt;=&lt;/span&gt; c&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;return&lt;/span&gt; c&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;ss&lt;span class="token punctuation"&gt;[&lt;/span&gt;N&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;*&lt;/span&gt;sp &lt;span class="token operator"&gt;=&lt;/span&gt; ss&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;int&lt;/span&gt; arr&lt;span class="token punctuation"&gt;[&lt;/span&gt;N&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token comment" spellcheck="true"&gt;
// 建[l,r)的高度平衡splay 像线段树一样 感觉快一点 当然也可以一个个insert &amp;amp; splay 
&lt;/span&gt;iT &lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token function"&gt;iMake&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; l&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;int&lt;/span&gt; r&lt;span class="token punctuation"&gt;,&lt;/span&gt; iT &lt;span class="token operator"&gt;*&lt;/span&gt;f &lt;span class="token operator"&gt;=&lt;/span&gt; NULL&lt;span class="token punctuation"&gt;)&lt;/span&gt;
&lt;span class="token punctuation"&gt;{&lt;/span&gt;
    &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;l &amp;gt;&lt;span class="token operator"&gt;=&lt;/span&gt; r&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token keyword"&gt;return&lt;/span&gt; NULL&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;int&lt;/span&gt; m &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;l &lt;span class="token operator"&gt;+&lt;/span&gt; r&lt;span class="token punctuation"&gt;)&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    iT &lt;span class="token operator"&gt;*&lt;/span&gt;c &lt;span class="token operator"&gt;=&lt;/span&gt; sp&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token operator"&gt;*&lt;/span&gt;c &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;iT&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
        f&lt;span class="token punctuation"&gt;,&lt;/span&gt; 
        &lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token function"&gt;iMake&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;l&lt;span class="token punctuation"&gt;,&lt;/span&gt; m&lt;span class="token punctuation"&gt;,&lt;/span&gt; c&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token function"&gt;iMake&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;m &lt;span class="token operator"&gt;+&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; r&lt;span class="token punctuation"&gt;,&lt;/span&gt; c&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; 
        arr&lt;span class="token punctuation"&gt;[&lt;/span&gt;m&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; r &lt;span class="token operator"&gt;-&lt;/span&gt; l&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token boolean"&gt;false&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;return&lt;/span&gt; c&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token keyword"&gt;int&lt;/span&gt; n&lt;span class="token punctuation"&gt;;&lt;/span&gt;

&lt;span class="token keyword"&gt;int&lt;/span&gt; &lt;span class="token function"&gt;main&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
&lt;span class="token punctuation"&gt;{&lt;/span&gt;
    n &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;iRead&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;for&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; i &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; i &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; n&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token operator"&gt;++&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;
        arr&lt;span class="token punctuation"&gt;[&lt;/span&gt;i&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;iRead&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    iT &lt;span class="token operator"&gt;*&lt;/span&gt;rt &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;iMake&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; n&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;int&lt;/span&gt; i&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;for&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;i &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; i &lt;span class="token operator"&gt;&amp;lt;=&lt;/span&gt; STP&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token operator"&gt;++&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;
    &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;int&lt;/span&gt; c &lt;span class="token operator"&gt;=&lt;/span&gt; rt&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;min&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;val&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;c &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;c &lt;span class="token operator"&gt;==&lt;/span&gt; n&lt;span class="token punctuation"&gt;)&lt;/span&gt;         &lt;span class="token comment" spellcheck="true"&gt; // !!!! 特判翻转全部的情况 
&lt;/span&gt;            rt&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;rev &lt;span class="token operator"&gt;^&lt;/span&gt;&lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;  &lt;span class="token comment" spellcheck="true"&gt; // 否则下面会select(n) 然后炸掉 
&lt;/span&gt;        &lt;span class="token keyword"&gt;else&lt;/span&gt;
        &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            rt &lt;span class="token operator"&gt;=&lt;/span&gt; rt&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;select&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;&lt;span class="token function"&gt;splay&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt; // splay完，根已经换了 
&lt;/span&gt;            rt&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;ch&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&amp;gt;rev &lt;span class="token operator"&gt;^&lt;/span&gt;&lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token function"&gt;printf&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;"%d\n"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; i &lt;span class="token operator"&gt;&amp;lt;=&lt;/span&gt; STP &lt;span class="token operator"&gt;?&lt;/span&gt; i &lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token function"&gt;fclose&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;stdout&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid>http://stirp.github.io//test.html</guid></item></channel>
</rss>