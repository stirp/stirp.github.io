<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>尚弟的小笔记</title>
        <atom:link href="http://blog.shrp.me//rss.xml" rel="self" type="application/rss+xml"/>
        <link>http://blog.shrp.me/</link>
        <dc:language>zh-cn</dc:language>
        <sy:updatePeriod>hourly</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>
    <item><title>Mac如何提高文件描述符个数</title><link>http://blog.shrp.me//Increase-Number-of-file-descriptor.html</link><pubdate>2016-07-09</pubdate><content:encoded>&lt;p&gt;　　作为一个常年使用Mac进行开发的程序猿，或多或少会接触到一些高并发的任务，动辄就需要电脑来它几千个线程，几万几十万个QPS。&lt;/p&gt;

&lt;p&gt;　　但是Mac的普通版本并没有为这种行为进行优化，最简单的，你在终端输入ulimit -a，你会看到当前系统能够打开的文件描述符默认只有……256。这根本不够好嘛？！&lt;/p&gt;

&lt;p&gt;　　但是作为一个Linux使用经验丰富的人，你一定以为它可以通过/etc下的配置修改。可惜Mac不是Linux而是FreeBSD体系，而且它这个配置自成一派，如果不谷歌一番，我还真不知道怎么改呢。&lt;/p&gt;

&lt;p&gt;　　在最新版的EI Capitan系统，要修改这个值，首先需要关闭csrutil。Mac对csrutil的安全措施很到位，你使用sudo是不能关闭的，首先需要进入recovery mode，也就是重启时按下command+r，进入恢复模式，然后打开终端，输入csrutil disable，然后重启，建立如下两个文件：&lt;/p&gt;

&lt;p&gt;/Library/LaunchDaemons/limit.maxfiles.plist&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;  
&amp;lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"  
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;
&amp;lt;plist version="1.0"&amp;gt;  
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;limit.maxfiles&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
      &amp;lt;string&amp;gt;launchctl&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;limit&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;maxfiles&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;524288&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;524288&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;ServiceIPC&amp;lt;/key&amp;gt;
    &amp;lt;false/&amp;gt;
  &amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/Library/LaunchDaemons/limit.maxproc.plist&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;  
&amp;lt;!DOCTYPE plist PUBLIC "-//Apple/DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;  
  &amp;lt;plist version="1.0"&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;limit.maxproc&amp;lt;/string&amp;gt;
      &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
          &amp;lt;string&amp;gt;launchctl&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;limit&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;maxproc&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;2048&amp;lt;/string&amp;gt;
          &amp;lt;string&amp;gt;2048&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
      &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
        &amp;lt;true /&amp;gt;
      &amp;lt;key&amp;gt;ServiceIPC&amp;lt;/key&amp;gt;
        &amp;lt;false /&amp;gt;
    &amp;lt;/dict&amp;gt;
  &amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再重启一次，执行ulimit -a，你就会发现数字都变化了，现在可以安心测试了！&lt;/p&gt;

&lt;p&gt;PS：其实你可以先建立文件再进入恢复模式的，这样一次重启就足够了&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Increase-Number-of-file-descriptor.html</guid></item><item><title>多机共享键鼠软件横向测评</title><link>http://blog.shrp.me//Multi-Computer-Mouse-and-Keyboard-sharing.html</link><pubdate>2016-07-02</pubdate><content:encoded>&lt;p&gt;我用了多年的多机共享软件Synergy，一直孤陋寡闻以为跨屏共享软件就只有这么一个，直到前两天在小众软件看到了&lt;a href="http://www.appinn.com/sharemouse/"&gt;sharemouse&lt;/a&gt;这款软件，试用后发现功能感觉更为强大；稍后更是检索了一番，发现了一众多屏共享软件，于是挑选了几个有代表性的软件做了简单的测试。&lt;/p&gt;

&lt;p&gt;首先介绍下多机共享软件的原理：此类软件都是通过网络连接，将控制机的键鼠动作和粘贴板的行为同步到被控制机器，从而达到用一套键鼠操作多台电脑的目的，节约用户的桌面空间，方便用户用一套软件控制多台机器。功能原理其实非常简单，因此测评主要注重用户体验。&lt;/p&gt;

&lt;h3 id="1synergyhttpsymlesscomsynergy"&gt;1. &lt;a href="http://symless.com/synergy/"&gt;Synergy&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Synergy 应该是最流行的一款多机共享操作的软件了，至少从&lt;a href="http://alternativeto.net/software/mouse-without-borders2"&gt;alternativeto.net&lt;/a&gt;来看是这样的；它的功能强大，简单好用，但是设置使用也是相对来说比较麻烦的。&lt;/p&gt;

&lt;p&gt;首先说怎么配置。它的软件安装后需要设置是服务端还是客户端，原理是键鼠所在的机器应该设置为服务端，其它机器设置为客户端，然后在客户端填写服务端IP或者HostName来连接服务端程序，完成配置。服务端和客户端都会生成自己的配置，如果你愿意，可以把它们都存到本地，然后通过文本修改来调整GUI界面所不提供的一些参数和功能；当然，这种调整对于大多数人来说根本没有用。&lt;/p&gt;

&lt;p&gt;配置好了以后当然是使用了，它提供了以下几种功能：&lt;/p&gt;

&lt;p&gt;基本功能：通过鼠标可以在不同的机器间移动，完成键鼠控制不同机器的目的。它支持最多15台机器互联和控制。可以通过鼠标拖拽实现文件的粘贴，文本和图片的复制粘贴也是可以的。&lt;/p&gt;

&lt;p&gt;热键：它提供自定义热键，可以切换屏幕，可以切换方向，也可以锁定指针在某一个屏幕。（话说这个功能我才注意到，不用鼠标切换桌面对于我来说非常实用的啊，应该早点注意到的）&lt;/p&gt;

&lt;p&gt;死角：死角是当鼠标移动到显示器的角落时，不切换屏幕。这个功能非常实用，因为这些地方通常有关闭按钮啊，开始菜单之类的，面积不算大，一不小心就挪出屏幕了。死角可以保证操作顺利。Synergy的死角可以统一设置，也可以针对某个机器进行单独设置。&lt;/p&gt;

&lt;p&gt;按键映射：Mac和Windows的按键是不一样的，如果在多个系统之间使用，肯定是要处理下ctrl，meta键的行为。我一般是Mac控制Windows，此时Windows的按键Cmd和Ctrl键是互换的。&lt;/p&gt;

&lt;p&gt;操作系统支持：Mac Linux Windows，有人也做了Android和iOS的程序（似乎没维护，iOS的好像已经不支持了）&lt;/p&gt;

&lt;p&gt;安全：由于客户端必须指定服务端IP，并且只能从服务端控制客户端，其控制的安全还是有保障的，很难被其他人控制了你的客户端。如果使用高级账户的SSL功能，网络也不能劫持到你通过网络传输的密码了，还是比较安全的。&lt;/p&gt;

&lt;p&gt;登陆界面：不管你的服务端和客户端是不是登陆界面，它都支持把鼠标挪进不同的机器，并且控制。&lt;/p&gt;

&lt;p&gt;缺点么，使用一段时间后我也发现很多了：它好像只支持从主机拖拽拖拽文件到Windows客户端而不能反向操作，Mac目录拖拽过去变成了一个很小的文件而不能使用（或许因为Mac的文件夹也是文件，没有当做文件夹处理）。复制文本和图片是双向的，但是有时候需要在进行复制的机器上找个地方粘贴一下，否则不能同步到其它机器——这可能跟文本复制粘贴的程序相关，我不止一次发现在客户端的Windows的微信客户端不能直接粘贴文本，必须要在客户端系统打开记事本粘贴一下再复制才能粘贴到客户端的微信。服务器的截图倒是可以直接粘贴到微信，但是根据截图大小，需要等网络传输后才能在客户端粘贴（高度怀疑没有压缩，直接传位图了），而且网络传输没有进度条，因此你不知道到底什么时候才能粘贴。使用复制粘贴不能将文件从一台电脑拷贝到另一台。还有，当客户端Windows的UAC窗口出现时，它是不能控制客户端的——UAC把它的能力禁止了。&lt;/p&gt;

&lt;p&gt;还有一个不算缺点的缺点：由于账号体系不是原生的，所以你机器的IP地址是没有中心服务器管理的——也就是说，如果你的两台设备在一个大局域网的不同子网内，没有做hostname的跨子网通知，并且强制DHCP，那么你就只能每次DHCP后重新在客户端设置服务端IP。如果能通过账号体系将自己的IP上报再下发到客户端，客户端再连接此IP的话就能解决这个问题了。&lt;/p&gt;

&lt;p&gt;它的收费目前分基本版和高级版，都是一次性购买，目前基本版10美元，高级版29美元。目前来说高级版的ssl和客服支持对于大多数人来说什么用也没有，10美元的lifetime access买这么一款给力的软件实在是……太便宜了。只能说作者现在要养活这么一个开发团队，难度有点高啊，很大可能若干年后作者跑路。不过Synergy的代码是开源的，开源社区会接盘。至少我还在用的话肯定会想办法去编译兼容版本的。&lt;/p&gt;

&lt;h3 id="2sharemousehttpwwwkeyboardandmousesharingcomindexhtml"&gt;2. &lt;a href="http://www.keyboard-and-mouse-sharing.com/index.html"&gt;ShareMouse&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;今天就是试用它以后才发现它做的真的很不错，如果是同一个局域网的话，安装好以后都不用设置就已经连接到一起了——不过在公司怎么办呢？那只好买收费版啦。它的另一个好处是没有服务端和客户端的区别，玩游戏时可以用一台电脑控制一台平板，睡觉的时候用平板控制电脑关机——等等，平板怎么把鼠标挪出屏幕呢？好吧，这个功能用处似乎不太多……&lt;/p&gt;

&lt;p&gt;基本功能：免费版支持最多2台机器互联和控制，高级版支持9台。可以通过鼠标拖拽和复制粘贴功能实现文件的粘贴，文本和图片的复制粘贴也是可以的。文件的复制粘贴会显示进度条，但是拖拽文件的时候没有显示，会卡死接受文件的目录——对，它接受文件的时候可以在任意文件夹。&lt;/p&gt;

&lt;p&gt;热键：只有直接跳到另一个屏幕的热键和粘贴的热键ctrl+v，不过这就够了吧。&lt;/p&gt;

&lt;p&gt;死角：这个功能当然也有啦，不过似乎不能指定几个像素。此外还有全屏自动禁止切换，这样玩游戏的时候另一台看电影听音乐，不会影响打游戏的。&lt;/p&gt;

&lt;p&gt;按键映射：这个我真没找到……&lt;/p&gt;

&lt;p&gt;操作系统支持：Mac Windows，很多真正有多屏使用需要的人免不了要用Linux的，这个客户端的缺失其实影响应该很大吧&lt;/p&gt;

&lt;p&gt;安全：免费的不能加密码，加密码后客户端是相同密码的就可以连接。也就是想在公司用，掏钱是肯定嗒。&lt;/p&gt;

&lt;p&gt;登陆界面：不管你的服务端和客户端是不是登陆界面，它都支持把鼠标挪进不同的机器，并且控制。而且UAC界面也能控制哦。&lt;/p&gt;

&lt;p&gt;简单试了一下，如果它是一次性购买的话我肯定就用它替代Synergy了——跟Synergy一样的流畅，方便，外加比它简单的配置，文件复制粘贴，都直击痛点。而且进入离开某台机器的时候可以屏幕变暗，真是太简单了有木有。&lt;/p&gt;

&lt;p&gt;缺点也是有的，最大的一个痛点是除了直接互联外，如果想自己加一台机器进来只能使用IP而不能使用HOSTNAME——也就是说，在使用DHCP的公司内，好像更加难用了。按键映射在跨平台的时候是个问题，我总不能Mac用Cmd+v而到Windows使用ctrl+v吧。Linux也要支持啊。&lt;/p&gt;

&lt;p&gt;至于收费么……它不仅不是一次性收费，每年的年费还特别高：即便是按照每年最便宜的年费，标准版是&lt;span&gt;$&lt;/span&gt;8.97，高级版是&lt;span&gt;$&lt;/span&gt;22.48。这是你一次性要交5年的情况下才有如此优惠。&lt;/p&gt;

&lt;p&gt;如果你只是在家里的两台电脑之间这么用，它的免费版还是挺值得推荐的(但是文件拖动是不支持的)；但凡你的使用场景比较复杂，那它就只能爱莫能助了。&lt;/p&gt;

&lt;h3 id="3mousewithoutbordershttpswwwmicrosoftcomenusdownloaddetailsaspxid35460"&gt;3. &lt;a href="https://www.microsoft.com/en-us/download/details.aspx?id=35460"&gt;Mouse without Borders&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;这款软件更像是钦定的感觉，你问我资瓷不资瓷，我当然是资瓷的啦，家里的两台Windows电脑已经使用它来替换Synergy了。作为微软官方的产品，它只支持Windows系列的系统；但是它的设定也简单，也没有客户端服务端的区别，文件的粘贴复制、拖拽更加流畅，没有卡死的情况发生。如果仅从文件操作这点来说，其它两个软件还是有点图样。&lt;/p&gt;

&lt;p&gt;基本功能：支持最多4台机器互联和控制，相互之间可以水平也可以上下各两台。可以通过鼠标拖拽和复制粘贴功能实现文件的粘贴，文本和图片的复制粘贴也是可以的。文件的复制粘贴会弹气泡提示。拖动到第二台机器的时候也会显示拖动的图标，跟在一台机器似的，效果相当赞。&lt;/p&gt;

&lt;p&gt;热键：有不少热键可以用，比Synergy多多了。&lt;/p&gt;

&lt;p&gt;死角：这个功能当然也有啦，也不能指定几个像素。并有全屏自动禁止切换&lt;/p&gt;

&lt;p&gt;按键映射：这个有，但是为啥Windows之间还要映射……&lt;/p&gt;

&lt;p&gt;操作系统支持：Sorry，Windows only&lt;/p&gt;

&lt;p&gt;安全：这个是通过软件显示自己的code，在另一台输入来实现的互联。所以不会导致你的电脑被别人控制的。&lt;/p&gt;

&lt;p&gt;登陆界面：如同ShareMouse，不管你的服务端和客户端是不是登陆界面，它都支持。UAC也不能阻止。&lt;/p&gt;

&lt;p&gt;此外它还支持IP的mapping，类似host功能，这是它应对跨子网DHCP的策略：你自己把ip写进去，然后用hostname去连接。&lt;/p&gt;

&lt;p&gt;如果你只用Windows，没有理由不用它改用其他软件。Windows最好的体验，外加免费。&lt;/p&gt;

&lt;h3 id="4teleporthttpabyssoftcomsoftwareteleport"&gt;4. &lt;a href="http://abyssoft.com/software/teleport/"&gt;teleport&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;一款只支持Mac的软件，简历上说作者从04年到现在都在苹果做开发。这么说来这软件就像是上边那款一样，都是官方出品啊。作者还有一款soundfly，是把声音传到另一台去的，难道这是airplay的原型？不明觉厉。&lt;/p&gt;

&lt;p&gt;不过看它的界面，真是非常非常简单，恐怕也没有办法在家以外使用。我就不进行尝试了，有需要的人可以试一试~&lt;/p&gt;

&lt;h3 id="5acrosshttpwwwacrosscentercom"&gt;5. &lt;a href="http://www.acrosscenter.com/"&gt;across&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;如果说上边几款软件通过TCP/IP来使用，这款软件就有意思多了，它使用蓝牙虚拟为键盘和鼠标，从而进一步操作对方的。然而它还是需要在控制和被控机器都安装自己，从而限制了它的使用范围。因此他只支持Mac和Windows和安卓（没有蓝牙的Windows台式机和iOS残念中……）&lt;/p&gt;

&lt;p&gt;不过话说它并不贵，    Windows客户端6.99美刀，Mac客户端6.99美刀，一起买9.99美刀。&lt;/p&gt;

&lt;h3 id="6multiplicityhttpedgerunnercommultiplicity"&gt;6. &lt;a href="http://edgerunner.com/multiplicity"&gt;Multiplicity&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;这款软件似乎又是只能支持Windows的，不过它有几个特点：可以同时锁定解锁，可以单独一台显示器（这跟硬件KVM几乎一样了啊！）。由于上边这条特性，它也可以远程工作，通过VPN工作，反正就一台显示器嘛，显示就是了。价格是一次性买断的， 我看还是比较合理，对于运维同学可以入手，其他人就算了吧……&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Multi-Computer-Mouse-and-Keyboard-sharing.html</guid></item><item><title>AppleDNS的Mac受害及恢复</title><link>http://blog.shrp.me//Restore-from-AppleDNS.html</link><pubdate>2016-05-02</pubdate><content:encoded>&lt;p&gt;自己一直关注小众软件，之前小众介绍了一款&lt;a href="https://github.com/gongjianhui/AppleDNS/"&gt;AppleDNS&lt;/a&gt;用于苹果用户的应用商店加速，自己其实不是特别需要，但是为了更加丝般顺畅的使用，按耐不住心里的期望，就试了一把。&lt;/p&gt;

&lt;p&gt;其实这种DNS类的加速方案不是没有过，但是由于苹果的IP地址范围其实很广，加上网络情况的瞬息万变，这种方案的可用性、有效期其实并不长；而这一款的网址库似乎是通过抓包分析的，恐怕连一些https的服务器也包括进去了；但是https的情况更加复杂，可能过两天服务器说换就换了，原有的host就失效了。&lt;/p&gt;

&lt;p&gt;但是我试用的过程中产生了更严重的后果，使用的时候Mac的App Store不能更新，也无法安装新应用，提示“无法验证产品分发文件。它可能已损坏或尚无签名”。于是很失望的把AppleDNS下掉了，心想刷下DNS，过两天它自己就升级了，不用太担心。&lt;/p&gt;

&lt;p&gt;可谁成想过了半个月，其他App都升级了，当时无法升级的还是无法升级。于是打开控制台，看到错误&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;&lt;span class="token number"&gt;16&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token number"&gt;5&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token number"&gt;2&lt;/span&gt; &lt;span class="token number"&gt;15&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token number"&gt;18&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token number"&gt;44.410&lt;/span&gt; storedownloadd&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;522&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt; Assertion failure &lt;span class="token keyword"&gt;in&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;CheckPreflightOperation verifyDistributionAtURL&lt;span class="token punctuation"&gt;:&lt;/span&gt;allowsDevSign&lt;span class="token punctuation"&gt;:&lt;/span&gt;allowsUnsigned&lt;span class="token punctuation"&gt;:&lt;/span&gt;osVersionToBeInstalled&lt;span class="token punctuation"&gt;:&lt;/span&gt;error&lt;span class="token punctuation"&gt;:&lt;/span&gt;distributionController&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;/&lt;/span&gt;Library&lt;span class="token operator"&gt;/&lt;/span&gt;Caches&lt;span class="token operator"&gt;/&lt;/span&gt;com&lt;span class="token punctuation"&gt;.&lt;/span&gt;apple&lt;span class="token punctuation"&gt;.&lt;/span&gt;xbs&lt;span class="token operator"&gt;/&lt;/span&gt;Sources&lt;span class="token operator"&gt;/&lt;/span&gt;Commerce&lt;span class="token operator"&gt;/&lt;/span&gt;Commerce&lt;span class="token number"&gt;-462.9&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;CommerceKit&lt;span class="token operator"&gt;/&lt;/span&gt;CheckPreflightOperation&lt;span class="token punctuation"&gt;.&lt;/span&gt;m&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token number"&gt;291&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;才知道这是中招了，一定是App Store把某种验证文件从当时错误的验证服务器保存在本地了，现在再行升级虽然不受AppleDNS的影响了，却还是无法升级的。经过google，发现有人通过创建用户，输入自己的AppleID，是可以升级的。我想，这说明阻止升级的文件是在用户目录的，用户目录最著名的供程序使用的目录是哪里？当然是~/Library/Caches啦，于是进去清空，然后安装、升级，进度条又一次开心的跑起来了。&lt;/p&gt;

&lt;p&gt;看来在苹果上用DNS类产品还真是挺危险的，如果产生问题的不是Mac而是iOS，那恐怕只能等苹果自己修复了。&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Restore-from-AppleDNS.html</guid></item><item><title>浅谈SSH客户端配置</title><link>http://blog.shrp.me//How-To-Configure-SSH-Client.html</link><pubdate>2016-04-18</pubdate><content:encoded>&lt;p&gt;SSH客户端对于很多IT从业人员都是必备，然而很多人仅仅是用了最基本的功能。当遇到了比如RSA Key等安全措施时，不能有效利用客户端，繁琐的操作流程影响了他们的工作热情。本文就简单说明一下SSH客户端的功能，帮助大家保持高效的开发工作。&lt;/p&gt;

&lt;h2 id="1sshkeygenauthrorized_keys"&gt;1. 基本连接功能（端口，用户，ssh-keygen，authrorized_keys)&lt;/h2&gt;

&lt;p&gt;一个基本的ssh是这么使用的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh 192.168.1.16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令会连接192.168.1.16机器的22端口，并且使用当前机器登录的用户名称去登录。大多数情况下目标机器的用户名称都不会是你当前电脑的用户名称，所以一般需要用ssh 用户名@ip的方式去使用。&lt;/p&gt;

&lt;p&gt;此外目前在公网的机器大多都会遇到蠕虫不断搜索ssh的端口号然后用密码字典crack的情况，因此大多机器的ssh端口号都会改到30000已上，比如36022端口。这种情况就需要指定ssh命令的端口号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -p 36022 dev@192.168.1.16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到目前为止，我们已经可以自由登录服务器了。但是我们发现每次都要输入密码，是个很麻烦的事情；能不能不输入密码登录呢？当然可以，我们可以执行ssh-keygen命令，可以一路回车，默认会在~/.ssh/下生成两个文件，id_rsa和id_rsa.pub文件，其中id_rsa是私钥，任何情况下你都不需要把这个文件给其他人；而id_rsa.pub是公钥，给谁都无所谓。然后通过正常的ssh登录到目标服务器，将id_rsa.pub的内容附加到目标机器目标用户的~/.ssh/authorized_keys文件里的单独一行，要保证~/.ssh目录的权限是700，authorized_keys的权限是600。然后再试一试，这次是不是不用密码了？&lt;/p&gt;

&lt;h2 id="2sshconfig"&gt;2. ssh config（保持链接，自动跳转）&lt;/h2&gt;

&lt;p&gt;然而你会发现每次都输入用户名ip地址，真是烦。ssh也想到了，提供了ssh_config(位置~/.ssh/config)。&lt;/p&gt;

&lt;p&gt;一个常见的配置如下：&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;Host jumper
    HostName jumper
    User dev
    Port &lt;span class="token number"&gt;36022&lt;/span&gt;
    IdentityFile &lt;span class="token operator"&gt;~&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;ssh&lt;span class="token operator"&gt;/&lt;/span&gt;jumper
    ForwardAgent yes
    ServerAliveInterval &lt;span class="token number"&gt;60&lt;/span&gt;
    ControlMaster auto
    ControlPath &lt;span class="token operator"&gt;/&lt;/span&gt;tmp&lt;span class="token operator"&gt;/&lt;/span&gt;ssh_mux_&lt;span class="token operator"&gt;%&lt;/span&gt;h_&lt;span class="token operator"&gt;%&lt;/span&gt;p_&lt;span class="token operator"&gt;%&lt;/span&gt;r
    ControlPersist 4h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行表示你ssh时的配置名，像这个配置只要ssh jumper即可；HostName是实际连接时使用的ip、机器名称，这个需要是本地ping得通的机器名；User是待连接的用户名；Port是ssh连接的端口号；IdentityFile是刚才所说的私钥文件；ForwardAgent可以持有通过验证的本地的key——如果你的登录是双因子的，它可以持用通过双因子验证或者输入了passphrase    的key，简化之后的登录行为；ServerAliveInterval用于保持ssh的连接，避免长时间不动作被服务器断开；ControlMaster则是开启了一个控制器，ControlPath是控制连接的保持文件，ControlPersist表示保持文件存活时间，如果第一次ssh之后，再次ssh同一台主机，ssh可以利用之前的连接文件，避免了二次登录，当然也不需要密码。&lt;/p&gt;

&lt;p&gt;上边这个配置文件通常是登录跳板机时使用的，然而我们每次都需要先ssh跳板机，然后在跳板机再去ssh目标服务器，实在是不方便。能不能从本地直接通过sshconfig就登录目标服务器呢？当然是可以的啦。&lt;/p&gt;

&lt;pre class=" language-bash"&gt;&lt;code class=" language-bash"&gt;Host server&lt;span class="token number"&gt;-1&lt;/span&gt; server&lt;span class="token number"&gt;-2&lt;/span&gt; server&lt;span class="token number"&gt;-3&lt;/span&gt;
    HostName &lt;span class="token operator"&gt;%&lt;/span&gt;h
    User dev
    ProxyCommand ssh jumper nc &lt;span class="token operator"&gt;%&lt;/span&gt;h &lt;span class="token operator"&gt;%&lt;/span&gt;p
    IdentityFile &lt;span class="token operator"&gt;~&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;ssh&lt;span class="token operator"&gt;/&lt;/span&gt;server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Host自然还是我们ssh时的名称，但是HostName是个变量，表示我们ssh的实际地址是上边Host中的某一个——这也就表示这三个服务器名称是跳板机所能够ping通的一个地址。但是通常用户的跳板机权限很低，无法编辑/etc/hosts文件来提供服务器名称和ip地址的解析，而HostName写服务器的ip名称显得特别不方便，有没有办法呢？其实是有的，参考项目&lt;a href="https://github.com/figiel/hosts"&gt;hosts&lt;/a&gt;，通过跳板机的~/.bashrc文件指定本地hosts文件就可以为大多数程序提供名称和ip的解析。ProxyCommand则表示ssh的过程是先通过ssh 跳板机，再执行 nc 再次执行后边的命令。因此跳板机需要保证拥有nc命令，如果没有，可以手动编译一个或者上传一个。最后的IdentityFile表示你在server里添加过公钥对应的私钥路径。如此设置以后，当你ssh server-1的时候会自动通过jumper配置到跳板机，然后通过nc命令到相应的服务器了。当然，rsync命令也能通过上述配置传送文件了，这样向某个服务器传文件或者从某个服务器down日志就不必再通过跳板机保存一次啦。需要注意的是此时目标服务器的authorized_key内放的是本地机器的公钥，而不是跳板机的公钥。&lt;/p&gt;

&lt;p&gt;ps:nc 也可以用-W参数，形式为&lt;code&gt;ProxyCommand ssh jumper -W %h:%p&lt;/code&gt;不过经过实验，不能多层跳转（比如先ssh develop 再ssh jumper 再ssh server1），而nc可以做到多层跳。如果你不需要多层跳转，-W参数最容易，也不需要copy nc程序。&lt;/p&gt;

&lt;h2 id="3"&gt;3. 端口转发，数据库等工具设置&lt;/h2&gt;

&lt;p&gt;端口转发非常简单，通过&lt;code&gt;ssh -D 端口号 host&lt;/code&gt;命令就连接到远端服务器的同时在本地端口号开一个socket代理，通过它你可以直接访问跳板机后边的资源，浏览器也可以通过它访问一些内部的http服务。&lt;/p&gt;

&lt;p&gt;而数据库工具也大多提供了ssh的配置，通常可以在sql客户端的ssh一栏添加跳板机的地址，ssh端口号，用户名和私钥，sql的地址和端口号就是sql服务器的内部ip地址和端口号，就可以不通过vpn访问跳板机后边隐藏的数据库啦。&lt;/p&gt;

&lt;p&gt;目前开发人员需要的ssh配置大体就这么多啦。&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//How-To-Configure-SSH-Client.html</guid></item><item><title>我的Simple改了什么</title><link>http://blog.shrp.me//What-Did-I-Change-To-Simple.html</link><pubdate>2016-03-23</pubdate><content:encoded>&lt;p&gt;Simple是一款基于GitHub JS API的博客系统，我选择它是因为它可以在GitHub提供的静态页面就能管理博客，写博文。不过它的缺点也很明显，GitHub的JS API不是专门的博客API，效率没有那么高；在移动终端上不完备的键盘也使得其无后台的优点没那么明显。&lt;/p&gt;

&lt;p&gt;我的版本一个改进是编辑框支持Tab键，这个跟功能在火狐上表现正常，但是在Chrome上还是会失去焦点——不过好在tab键还是输入了的，更多的我也不管了。&lt;/p&gt;

&lt;p&gt;第二个功能呢是支持了以markdown格式备份博文。其实这个功能很简单，如果你看得懂，用bash去执行这个过程效率会更高；不过既然Simple是无后端的，所以一个基于页面的导出功能还是有点用的，至少当你换博客系统的时候没那么麻烦。不过时间会很长，提前准备瓜子小板凳哈。&lt;/p&gt;

&lt;p&gt;还有一个功能是支持RSS的生成。我找了很多JS生成XML的代码，发现没有合适的方案；好在RSS格式本身不麻烦，根据一个模板来生成RSS还是很简单的，当然，由于要读取多次博文内容，生成RSS的时间还是挺长的，所以最后没有采用保存的时候自动生成，而是作者自己手动生成的方法。不过我遗留了一点小问题，由于手头没有IE，所以IE的兼容性暂时没有做。&lt;/p&gt;

&lt;p&gt;还有一点点小改进，一个是文件名自动加html后缀，一个是时间自动取当前时间，免得忘记存时间了。&lt;/p&gt;

&lt;p&gt;终于这个轻巧的博客系统可以随便用了，哇哈哈哈~&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//What-Did-I-Change-To-Simple.html</guid></item><item><title>从PHP迁移到Java遇到的问题</title><link>http://blog.shrp.me//Problems-in-Code-Transfer-From-PHP-To-JAVA.html</link><pubdate>2016-03-20</pubdate><content:encoded>&lt;p&gt;有一段PHP代码是这样的：&lt;/p&gt;

&lt;pre class=" language-php"&gt;&lt;code class=" language-php"&gt;&lt;span class="token variable"&gt;$s&lt;/span&gt;&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;'%Qw%e1%16%11%4'&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token variable"&gt;$r&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;urldecode&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token variable"&gt;$s&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token variable"&gt;$result&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;md5&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token variable"&gt;$r&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;乍看之下迁移到Java好像很容易嘛，可是实际操作了一下才发现，这个问题并不好解决。&lt;/p&gt;

&lt;p&gt;为什么呢？&lt;/p&gt;

&lt;p&gt;问题就出在PHP的urldecode函数，并不需要字符串是符合urlencode规范的。&lt;/p&gt;

&lt;p&gt;比如我示例中的字符串，%Qw不是一个合理的十六进制数字，Java版本会报错，中止decode；但是PHP并不会，它把不符合条件的都当作单独的字符来解析，比如%Qw就不再是一个转义的字符了，而是三个单独的字符。&lt;/p&gt;

&lt;p&gt;那么这么一段urldecode代码迁移到Java后就换成下述代码：&lt;/p&gt;

&lt;pre class=" language-java"&gt;&lt;code class=" language-java"&gt;
&lt;span class="token keyword"&gt;package&lt;/span&gt; me&lt;span class="token punctuation"&gt;.&lt;/span&gt;shrp&lt;span class="token punctuation"&gt;.&lt;/span&gt;blog&lt;span class="token punctuation"&gt;;&lt;/span&gt;

&lt;span class="token keyword"&gt;import&lt;/span&gt; java&lt;span class="token punctuation"&gt;.&lt;/span&gt;io&lt;span class="token punctuation"&gt;.&lt;/span&gt;UnsupportedEncodingException&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;import&lt;/span&gt; java&lt;span class="token punctuation"&gt;.&lt;/span&gt;util&lt;span class="token punctuation"&gt;.&lt;/span&gt;LinkedList&lt;span class="token punctuation"&gt;;&lt;/span&gt;
&lt;span class="token keyword"&gt;import&lt;/span&gt; java&lt;span class="token punctuation"&gt;.&lt;/span&gt;util&lt;span class="token punctuation"&gt;.&lt;/span&gt;List&lt;span class="token punctuation"&gt;;&lt;/span&gt;

&lt;span class="token comment" spellcheck="true"&gt;/**
 * Created by shangrenpeng on 16/2/18.
 */&lt;/span&gt;
&lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;class&lt;/span&gt; &lt;span class="token class-name"&gt;PHPUrlDecoder&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
    &lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token function"&gt;decode&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;String s&lt;span class="token punctuation"&gt;,&lt;/span&gt; String enc&lt;span class="token punctuation"&gt;)&lt;/span&gt;
            &lt;span class="token keyword"&gt;throws&lt;/span&gt; UnsupportedEncodingException &lt;span class="token punctuation"&gt;{&lt;/span&gt;

        &lt;span class="token keyword"&gt;int&lt;/span&gt; numChars &lt;span class="token operator"&gt;=&lt;/span&gt; s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;length&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        List&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;Byte&amp;gt; sb &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;LinkedList&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&amp;gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;int&lt;/span&gt; i &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

        &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;enc&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;length&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;==&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;throw&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;UnsupportedEncodingException&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;"URLDecoder: empty string enc parameter"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;

        &lt;span class="token keyword"&gt;char&lt;/span&gt; c&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; bytes &lt;span class="token operator"&gt;=&lt;/span&gt; null&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token keyword"&gt;while&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;i &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; numChars&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            c &lt;span class="token operator"&gt;=&lt;/span&gt; s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;charAt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token keyword"&gt;switch&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                &lt;span class="token keyword"&gt;case&lt;/span&gt; &lt;span class="token string"&gt;'+'&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;
                    &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt;String&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;valueOf&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;' '&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;"UTF-8"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    i&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                &lt;span class="token keyword"&gt;case&lt;/span&gt; &lt;span class="token string"&gt;'%'&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;
                &lt;span class="token comment" spellcheck="true"&gt;/*
                 * Starting with this instance of %, process all
                 * consecutive substrings of the form %xy. Each
                 * substring %xy will yield a byte. Convert all
                 * consecutive  bytes obtained this way to whatever
                 * character(s) they represent in the provided
                 * encoding.
                 */&lt;/span&gt;

                    &lt;span class="token keyword"&gt;try&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                        &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;!&lt;/span&gt;&lt;span class="token function"&gt;canParse&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;s &lt;span class="token punctuation"&gt;,&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
                            &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt;String&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;valueOf&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;"UTF-8"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            i&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                        &lt;span class="token punctuation"&gt;}&lt;/span&gt;

                       &lt;span class="token comment" spellcheck="true"&gt; // (numChars-i)/3 is an upper bound for the number
&lt;/span&gt;                       &lt;span class="token comment" spellcheck="true"&gt; // of remaining bytes
&lt;/span&gt;                        &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;bytes &lt;span class="token operator"&gt;==&lt;/span&gt; null&lt;span class="token punctuation"&gt;)&lt;/span&gt;
                            bytes &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;numChars&lt;span class="token operator"&gt;-&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token number"&gt;/3&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                        &lt;span class="token keyword"&gt;int&lt;/span&gt; pos &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

                        &lt;span class="token keyword"&gt;while&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;i&lt;span class="token number"&gt;+2&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; numChars&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                                &lt;span class="token punctuation"&gt;(&lt;/span&gt;c&lt;span class="token operator"&gt;==&lt;/span&gt;&lt;span class="token string"&gt;'%'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;

                            &lt;span class="token keyword"&gt;int&lt;/span&gt; v &lt;span class="token operator"&gt;=&lt;/span&gt; Integer&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;parseInt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;substring&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token number"&gt;+1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;i&lt;span class="token number"&gt;+3&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token number"&gt;,16&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt;
//                            if (v &amp;lt; 0){
&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt;//                                throw new IllegalArgumentException("URLDecoder: Illegal hex characters in escape (%) pattern - negative value");
&lt;/span&gt;&lt;span class="token comment" spellcheck="true"&gt;//                            }
&lt;/span&gt;
                            bytes&lt;span class="token punctuation"&gt;[&lt;/span&gt;pos&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; v&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            i&lt;span class="token operator"&gt;+&lt;/span&gt;&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 3&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                            &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;i &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; numChars&lt;span class="token punctuation"&gt;)&lt;/span&gt;
                                c &lt;span class="token operator"&gt;=&lt;/span&gt; s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;charAt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
                        &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;,&lt;/span&gt;pos&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;catch&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;NumberFormatException&lt;/span&gt; e&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                        &lt;span class="token keyword"&gt;throw&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;
                                &lt;span class="token string"&gt;"URLDecoder: Illegal hex characters in escape (%) pattern - "&lt;/span&gt;
                                        &lt;span class="token operator"&gt;+&lt;/span&gt; e&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getMessage&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
                    &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                &lt;span class="token keyword"&gt;default&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;
                    &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;sb&lt;span class="token punctuation"&gt;,&lt;/span&gt;String&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;valueOf&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;getBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token string"&gt;"UTF-8"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    i&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
                    &lt;span class="token keyword"&gt;break&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token punctuation"&gt;}&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;

        &lt;span class="token keyword"&gt;final&lt;/span&gt; Byte&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; ret &lt;span class="token operator"&gt;=&lt;/span&gt; sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;toArray&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;Byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;size&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

        &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token function"&gt;toPrimitive&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;ret&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; EMPTY_BYTE_ARRAY &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;byte&lt;/span&gt;&lt;span class="token number"&gt;[0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

    &lt;span class="token keyword"&gt;public&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token function"&gt;toPrimitive&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;Byte&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; array&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;array &lt;span class="token operator"&gt;==&lt;/span&gt; null&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; null&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;array&lt;span class="token punctuation"&gt;.&lt;/span&gt;length &lt;span class="token operator"&gt;==&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; EMPTY_BYTE_ARRAY&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; result &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;new&lt;/span&gt; &lt;span class="token class-name"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;array&lt;span class="token punctuation"&gt;.&lt;/span&gt;length&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;

            &lt;span class="token keyword"&gt;for&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; i &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; i &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; array&lt;span class="token punctuation"&gt;.&lt;/span&gt;length&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token operator"&gt;++&lt;/span&gt;i&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
                result&lt;span class="token punctuation"&gt;[&lt;/span&gt;i&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; array&lt;span class="token punctuation"&gt;[&lt;/span&gt;i&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;byteValue&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token punctuation"&gt;}&lt;/span&gt;

            &lt;span class="token keyword"&gt;return&lt;/span&gt; result&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;private&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;void&lt;/span&gt; &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;final&lt;/span&gt; List&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;Byte&amp;gt; sb&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;,&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; pos&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; j &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; j &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; pos&lt;span class="token punctuation"&gt;;&lt;/span&gt; j&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
            sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;add&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;bytes&lt;span class="token punctuation"&gt;[&lt;/span&gt;j&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;private&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;void&lt;/span&gt; &lt;span class="token function"&gt;addBytes&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;final&lt;/span&gt; List&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;Byte&amp;gt; sb&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;byte&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;int&lt;/span&gt; j &lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token number"&gt; 0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; j &lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt; bytes&lt;span class="token punctuation"&gt;.&lt;/span&gt;length&lt;span class="token punctuation"&gt;;&lt;/span&gt; j&lt;span class="token operator"&gt;++&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
            sb&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;add&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;bytes&lt;span class="token punctuation"&gt;[&lt;/span&gt;j&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;

    &lt;span class="token keyword"&gt;private&lt;/span&gt; &lt;span class="token keyword"&gt;static&lt;/span&gt; &lt;span class="token keyword"&gt;boolean&lt;/span&gt; &lt;span class="token function"&gt;canParse&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="token keyword"&gt;final&lt;/span&gt; String s&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;final&lt;/span&gt; &lt;span class="token keyword"&gt;int&lt;/span&gt; i&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
        &lt;span class="token keyword"&gt;try&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;int&lt;/span&gt; v &lt;span class="token operator"&gt;=&lt;/span&gt; Integer&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;parseInt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;s&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;substring&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;/span&gt;i&lt;span class="token number"&gt;+1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;i&lt;span class="token number"&gt;+3&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token number"&gt;,16&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token boolean"&gt;true&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;catch&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Exception&lt;/span&gt; e&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
            &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token boolean"&gt;false&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;
        &lt;span class="token punctuation"&gt;}&lt;/span&gt;
    &lt;span class="token punctuation"&gt;}&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid>http://blog.shrp.me//Problems-in-Code-Transfer-From-PHP-To-JAVA.html</guid></item><item><title>好久不更新了，得肺结核了</title><link>http://blog.shrp.me//Too-Long-No-Update-Since-Got-Tuberculosis.html</link><pubdate>2012-03-13</pubdate><content:encoded>&lt;p&gt;　　很久没更新了，最近得了肺结核，一阵检查之类的，现在确诊了，只好从公司出来，好好治病。&lt;/p&gt;

&lt;p&gt;　　正好好好写论文吧，也算是一个休整时期吧。&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Too-Long-No-Update-Since-Got-Tuberculosis.html</guid></item><item><title>无语了……本博客与淘宝商城没有任何联系！！！</title><link>http://blog.shrp.me//This-Blog-Has-Nothing-With-Tmall.html</link><pubdate>2012-01-12</pubdate><content:encoded>&lt;p&gt;　　我已经无语了……淘宝商城在毫无征兆的情况下改用了天猫作为名称，让我一下子不知所措。&lt;/p&gt;

&lt;p&gt;　　我的网站采用天猫是从我大二，也就是2007年底08年初的时候做的第一版就开始了。当时用的是&lt;a href="http://lynx.xinwen365.com"&gt;http://lynx.xinwen365.com&lt;/a&gt;吧，时间太过久远，记不清楚了。是采用iframe分栏的布局，记事本写的代码。后来该空间关闭，我换用花生壳的服务，在本机提供服务，地址&lt;a href="http://nada.eicp.net"&gt;http://nada.eicp.net&lt;/a&gt;。在这个URL上我做过两次升级，分别为第二版（2010年，纯手工静态，3个子站）和第三版（2011年2月纯php）。&lt;/p&gt;

&lt;p&gt;　　现在已经第四版了，采用了php+js+文件管理。在互联网上的只是我的网站的子集，仅包括博客部分，所以后缀了一个Small；在我的本地还提供了SVN、资料分享、媒体分享（主要是我的设备比较多，没有媒体分享就需要把同一个电影来回拷贝，太麻烦）。&lt;/p&gt;

&lt;p&gt;　　经过这么久的时间，我的网站一直采用这个名字，可见我的博客跟淘宝商城毫无关系。不要误会了哟~&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//This-Blog-Has-Nothing-With-Tmall.html</guid></item><item><title>打算在我的eeepc小笔电上边装个puppy</title><link>http://blog.shrp.me//Install-Puppy-Linux-in-My-EEEPC.html</link><pubdate>2011-12-28</pubdate><content:encoded>&lt;p&gt;　　原来我的小笔电EEEPC安装过两个Puppy版本，一个是曾经比较流行的小芭比Linux&lt;a href="http://www.minilinux.net/software/%E5%B0%8F%E8%8A%AD%E6%AF%94"&gt;链接1&lt;/a&gt;，貌似目前已经停止了；另一个是官方原版的lupu-520版本，目前已经是528版本了吧&lt;a href="http://bkhome.org/blog/?viewDetailed=02418"&gt;链接2&lt;/a&gt;。当时试了几种中文输入法，都不成功，改用了搜狗网页版，凑合用着。不过多试几次就没兴趣了。&lt;/p&gt;

&lt;p&gt;　　再后来我的小笔电把win7换回xp的时候把c盘用ghost还原了，puppy自然也就不在了。今天打算再安装回去，正好单位的事情也办的差不多了，随手安装吧，嘿嘿，等这回安装好了再发文总结。&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//Install-Puppy-Linux-in-My-EEEPC.html</guid></item><item><title>二分查找法查找中点的方法（C语言）</title><link>http://blog.shrp.me//A-Method-To-Find-Midlle-in-Binary-Search-in-C.html</link><pubdate>2011-12-07</pubdate><content:encoded>&lt;p&gt;　　今天跟同事说起二分查找法中常见的一个问题，就是计算中点时会溢出的问题。&lt;/p&gt;

&lt;p&gt;　　常见的方法（a+b）/2就是铁定会溢出的方法。如果a和b很大，之和超出了它们定义的范围，那么运算结果可能会是负数，这绝对不是我们想要的。&lt;/p&gt;

&lt;p&gt;　　之后同事说他看到一个算法是(a+b)&amp;gt;1。其实这个问题只能说缓解了溢出的问题，实际问题还是存在的。为啥？比如int，当发生上溢的时候，溢出的进位其实进入了符号位；而右移的时候把符号位移到了第一位，此时计算结果是正确的；但是如果是无符号整型，溢出的时候已经丢弃了进位，右移后结果要少差一半。&lt;/p&gt;

&lt;p&gt;　　所以最好还是用a+（b-a）/2这样。除二或者右移一位都是可以的。当然，前提是因为我们知道a和b作为数组下标，都是正数，因此b-a不会下溢。如果你的数组奇怪到居然用负数左下标，呃，好吧，a和b做右移或除2处理再相加吧。不过记得要判断两个都是奇数的情况哦！&lt;/p&gt;</content:encoded><guid>http://blog.shrp.me//A-Method-To-Find-Midlle-in-Binary-Search-in-C.html</guid></item></channel>
</rss>